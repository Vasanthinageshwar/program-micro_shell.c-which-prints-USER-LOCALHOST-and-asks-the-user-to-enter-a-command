Write a C program "micro_shell.c" which prints
"USER@LOCALHOST:" and asks the user to enter a command. If user input is
 
        a. "exit": terminate the program
        b. "cat
<filename>": Identify the <filename> from the user input.
Create a child process where the child process executes the executable
file generated from the previous source code along with the argument.
        c. Any other input: Print a suitable error message and continue execution.
        
        
        CODE:
        
        #include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<sys/types.h>

int main(int argc,char** argv)
{
        printf("USER@LOCALHOST:");
        if(strcmp(argv[1],"exit")==0)
        {
                printf("The process terminated.\n");
                exit(0);
        }
        else if(strcmp(argv[1],"cat")==0)
        {
                char *file = argv[2];
                pid_t pid;
                pid = fork();
                if(pid < 0)
                {
                        perror("Failed to fork!\n");
                        exit(-1);
                }
                else if(pid == 0)
                {
                        char *args[] = {"Hello", "C", "Programming", NULL};
                        execv("./file",args);
                        
                        printf("Sub-process,PID: %u,PPID: %u\n",getpid(),getppid());
                }
                else
                {
                        
                        printf("Parent,PID: %u,Sub-process PID: %u\n",getpid(),pid);
                        sleep(2);
                }
        }
        else
        {
                printf("Entered wrong command.Enter either exit or cat <file_name> as CLA\n");
        }
        return 0;
}
